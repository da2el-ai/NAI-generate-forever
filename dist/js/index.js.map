{"version":3,"file":"index.js","sources":["../../src/js/nai_ui/ElementControl.ts","../../src/js/nai_ui/NaiGenerateForever.ts","../../src/js/index.ts"],"sourcesContent":["///////////////////////////////////////////\n///////////////////////////////////////////\n// ボタンのコントロール\n///////////////////////////////////////////\n///////////////////////////////////////////\n\n// import { setStylesheet } from './css';\n\ntype TElementControlOption = {\n  foreverFunc: () => void;\n  cancelFunc: () => void;\n};\n\ntype TInputComponent = {\n  component: HTMLElement;\n  input: HTMLInputElement;\n};\n\n////////////////////////\n// 定数\nconst DEFAULT_WAIT_SEC = 3;\nconst DEFAULT_WAIT_RANDOM = 2;\nconst CLASS_CONTAINER = 'd2-container';\nconst CLASS_INPUT_CONTAINER = 'd2-input-container';\nconst CLASS_INPUT_COMPO = 'd2-input-compo';\nconst CLASS_INPUT = 'd2-input';\nconst CLASS_LABEL = 'd2-label';\nconst CLASS_BUTTON_CONTAINER = 'd2-btn-container';\nconst CLASS_BUTTON = 'd2-btn';\nconst CLASS_BUTTON_ACTIVE = 'd2-btn--active';\nconst CLASS_COUNT_AREA = 'd2-count-area';\n\n////////////////////////\n////////////////////////\nclass ElementControl {\n  elementContainer: HTMLElement;\n  foreverButton: HTMLElement | null = null;\n  cancelButton: HTMLElement | null = null;\n  waitSecInput: HTMLInputElement | null = null;\n  waitRandomInput: HTMLInputElement | null = null;\n  batchCountInput: HTMLInputElement | null = null;\n  counter: HTMLElement | null = null;\n  foreverFunc: () => void;\n  cancelFunc: () => void;\n\n  /**\n   * コンストラクタ\n   * @param opt\n   */\n  constructor(opt: TElementControlOption) {\n    this.foreverFunc = opt.foreverFunc;\n    this.cancelFunc = opt.cancelFunc;\n\n    // setStylesheet();\n\n    // 操作エレメントを格納するコンテナ\n    this.elementContainer = document.createElement('div');\n    this.elementContainer.classList.add(CLASS_CONTAINER);\n\n    // ボタンを作成\n    this.$_createButtons();\n    this.$_createInputs();\n  }\n\n  get waitSec(): number {\n    const waitSec = parseInt(this.waitSecInput?.value || '0');\n    return waitSec >= 1 ? waitSec : DEFAULT_WAIT_SEC;\n  }\n  get waitRandom(): number {\n    const waitRandom = parseInt(this.waitRandomInput?.value || '0');\n    return waitRandom >= 1 ? waitRandom : DEFAULT_WAIT_RANDOM;\n  }\n  get batchCount(): number {\n    return parseInt(this.batchCountInput?.value || '0');\n  }\n\n  /**\n   * カウンターに数値を入れる\n   * @param num\n   */\n  setCounter(num: number) {\n    if (!this.counter) return;\n    this.counter.textContent = String(num);\n  }\n\n  /**\n   * 通常状態にする\n   */\n  setStateNormal() {\n    if (!this.foreverButton || !this.cancelButton) return;\n\n    this.foreverButton.classList.remove(CLASS_BUTTON_ACTIVE);\n    this.cancelButton.classList.remove(CLASS_BUTTON_ACTIVE);\n  }\n\n  /**\n   * 無限生成状態にする\n   */\n  setStateActive() {\n    if (!this.foreverButton || !this.cancelButton) return;\n\n    this.foreverButton.classList.add(CLASS_BUTTON_ACTIVE);\n    this.cancelButton.classList.add(CLASS_BUTTON_ACTIVE);\n  }\n\n  /**\n   * 指定エレメントにUIエレメントを挿入\n   * @param parent\n   */\n  attachElements(parent: HTMLElement) {\n    parent.appendChild(this.elementContainer);\n  }\n\n  /**\n   * 個別ボタン作成\n   * @param text\n   * @returns\n   */\n  private $_createButtonElement(text: string) {\n    const button = document.createElement('button');\n    button.classList.add(CLASS_BUTTON);\n    button.innerHTML = text;\n    return button;\n  }\n\n  /**\n   * 生成・キャンセルボタン作成\n   */\n  private $_createButtons() {\n    this.foreverButton = this.$_createButtonElement('Forever');\n    this.foreverButton.addEventListener('click', () => {\n      this.foreverFunc();\n    });\n\n    this.cancelButton = this.$_createButtonElement('Cancel');\n    this.cancelButton.addEventListener('click', () => {\n      this.cancelFunc();\n    });\n\n    // 生成枚数カウンタ\n    this.counter = document.createElement('span');\n    this.counter.classList.add(CLASS_COUNT_AREA);\n    this.counter.textContent = '0';\n\n    const buttonsContainer = document.createElement('div');\n    buttonsContainer.classList.add(CLASS_BUTTON_CONTAINER);\n    buttonsContainer.appendChild(this.foreverButton);\n    buttonsContainer.appendChild(this.cancelButton);\n    buttonsContainer.appendChild(this.counter);\n    this.elementContainer.appendChild(buttonsContainer);\n  }\n\n  /**\n   * 入力エリアとラベルのセットを作成\n   * @returns\n   */\n  private $_createInputElement(text: string, value: string): TInputComponent {\n    const component = document.createElement('div');\n    component.classList.add(CLASS_INPUT_COMPO);\n\n    const label = document.createElement('span');\n    label.classList.add(CLASS_LABEL);\n    label.textContent = text;\n\n    // const inputContainer = document.createElement('div');\n\n    const input = document.createElement('input');\n    input.setAttribute('type', 'number');\n    input.classList.add(CLASS_INPUT);\n    input.value = value;\n\n    // inputContainer.appendChild(input);\n    component.appendChild(label);\n    // component.appendChild(inputContainer);\n    component.appendChild(input);\n\n    return {\n      component,\n      input,\n    };\n  }\n\n  /**\n   * 入力エリアを作成\n   */\n  private $_createInputs() {\n    // 生成枚数\n    const batchCountComponent = this.$_createInputElement('Batch count (0 = ∞)', '0');\n    this.batchCountInput = batchCountComponent.input;\n\n    // 待機時間の最小値\n    const waitSecComponent = this.$_createInputElement('Wait sec', String(DEFAULT_WAIT_SEC));\n    this.waitSecInput = waitSecComponent.input;\n\n    // 待機時間の最大値\n    const waitRandomComponent = this.$_createInputElement('Wait random', String(DEFAULT_WAIT_RANDOM));\n    this.waitRandomInput = waitRandomComponent.input;\n\n    // 入力エリアコンテナ\n    const inputContainer = document.createElement('div');\n    inputContainer.classList.add(CLASS_INPUT_CONTAINER);\n    inputContainer.appendChild(batchCountComponent.component);\n    inputContainer.appendChild(waitSecComponent.component);\n    inputContainer.appendChild(waitRandomComponent.component);\n    this.elementContainer.appendChild(inputContainer);\n  }\n}\n\nexport { ElementControl };\n","///////////////////////////////////////////\n///////////////////////////////////////////\n// 無限生成管理\n///////////////////////////////////////////\n///////////////////////////////////////////\n\nimport { ElementControl } from './ElementControl';\n// import { PromptControl } from './PromptControl';\n\ntype TNGFState = 'forever' | 'stop';\n\n// type TPromptElement = HTMLInputElement & {\n//     _valueTracker?: {\n//         setValue: (param: string) => void;\n//     };\n// };\n\nclass NaiGenerateForever {\n    // 標準の生成ボタンのセレクタ\n    static BTN_SELECTOR =\n        '#__next > div:nth-child(2) > div:nth-child(4) > div > div:nth-child(5) > button[data-confirm-added=\"true\"]';\n    // 標準のプロンプトエリアのセレクタ\n    static PROMPT_SELECTOR = \"textarea[placeholder='プロンプトを入力し、理想の画像を生成しましょう']\";\n    // 標準の生成ボタン\n    // generateButton: HTMLButtonElement | null = null;\n    // 生成回数カウンタ\n    generateCount: number = 0;\n    // 追加で作成するエレメントのコントローラー\n    elmCtrl: ElementControl;\n    // プロンプト変換コントローラー\n    // promptCtrl: PromptControl;\n    // ステータス\n    state: TNGFState = 'stop';\n\n    constructor() {\n        // this.promptCtrl = new PromptControl();\n\n        // 操作エレメントコントローラー生成\n        this.elmCtrl = new ElementControl({\n            foreverFunc: () => {\n                this.generateForever();\n            },\n            cancelFunc: () => {\n                this.cancelForever();\n            },\n        });\n\n        // 一定間隔で無限生成ボタンの存在確認と配置を行う\n        this.resetElements();\n        setInterval(() => {\n            this.resetElements();\n        }, 3000);\n    }\n\n    get generateButton() {\n        return document.querySelector(NaiGenerateForever.BTN_SELECTOR) as HTMLButtonElement;\n    }\n\n    /**\n     * 生成ボタンを変数に格納する\n     * ボタンが画面から消えていたら配置もする\n     */\n    resetElements() {\n        // this.generateButton = document.querySelector(NaiGenerateForever.BTN_SELECTOR);\n\n        // インペイント画面などで生成ボタンが無ければ抜ける\n        if (!this.generateButton) return;\n\n        const parent = this.generateButton.parentNode as HTMLElement;\n\n        if (!parent.contains(this.elmCtrl.foreverButton)) {\n            this.elmCtrl.attachElements(parent);\n        }\n    }\n\n    /**\n     * 無限生成を停止\n     */\n    cancelForever() {\n        this.state = 'stop';\n        // ボタンを通常状態に戻す\n        this.elmCtrl.setStateNormal();\n        // // プロンプトを元に戻す\n        // this.setPrompt(this.promptCtrl.originalPrompt);\n    }\n\n    /**\n     * 無限生成を開始\n     */\n    generateForever() {\n        // this.cancelForever();\n\n        this.generateCount = 0;\n        this.elmCtrl.setCounter(0);\n\n        // ボタンを開始状態にする\n        this.elmCtrl.setStateActive();\n        this.state = 'forever';\n\n        // // オリジナルプロンプトの保存\n        // this.promptCtrl.setOriginalPrompt(this.getPrompt());\n\n        this.generateImage();\n    }\n\n    async generateImage() {\n        if (this.state === 'forever' && this.generateButton && !this.generateButton.disabled) {\n            this.generateCount += 1;\n            this.elmCtrl.setCounter(this.generateCount);\n\n            // this.setPrompt(this.promptCtrl.getRandomPrompt());\n            await this.naildCard();\n\n            this.generateButton.click();\n        }\n\n        if (this.elmCtrl.batchCount > 0 && this.generateCount >= this.elmCtrl.batchCount) {\n            // 指定数達したら終了\n            this.cancelForever();\n            //\n        } else if (this.state === 'forever') {\n            // ランダム時間待機して再実行\n            const timing = (Math.random() * this.elmCtrl.waitRandom + this.elmCtrl.waitSec) * 1000;\n            // console.log(timing);\n\n            setTimeout(() => {\n                this.generateImage();\n            }, timing);\n        }\n    }\n\n    /**\n     * Naildcardがインストールされていたら実行する\n     */\n    naildCard() {\n        const diceBtn = document.getElementById('dice-button');\n        if (!diceBtn) return;\n\n        diceBtn.click();\n        return new Promise((resolve) => setTimeout(resolve, 500));\n    }\n\n    // get promptElement() {\n    //     return document.querySelector(NaiGenerateForever.PROMPT_SELECTOR) as TPromptElement;\n    // }\n\n    // setPrompt(prompt: string) {\n    //     const promptElement = this.promptElement;\n    //     promptElement.value = prompt;\n    //     promptElement._valueTracker?.setValue('');\n    //     promptElement.dispatchEvent(new Event('input', { bubbles: true }));\n    // }\n\n    // getPrompt(): string {\n    //     return this.promptElement.value;\n    // }\n}\n\nexport { NaiGenerateForever };\n","import { NaiGenerateForever } from './nai_ui/NaiGenerateForever';\n\n(function () {\n    setTimeout(() => {\n        new NaiGenerateForever();\n    }, 3000);\n})();\n"],"names":[],"mappings":"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"}